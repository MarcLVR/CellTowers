knitr::opts_chunk$set(echo = TRUE)
quarto::quarto_render()
quarto::quarto_path()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
library(readxl)
library(openxlsx)
library(sf)
library(ggplot2)
library(dplyr)
library(units)
library(giscoR)
library(scales)
library(plotly);library(quarto)
df2 <- read.csv("C:/Users/marc/Desktop/UOC/DataViz/P2/Africa towers.csv")
#rm(df2)
df_egypt <- df2[df2$Country == "Egypt", ]
df_egypt <- df_egypt[df_egypt$LON >= 30.6 & df_egypt$LON <= 33.2, ]
df_egypt <- df_egypt[, !(names(df_egypt) %in% c("created", "updated", "averageSignal", "Continent"))]
# Paso 1: Agrupar en intervalos
plot_rango <- df_egypt %>%
mutate(RangeGroup = cut(RANGE,
breaks = c(0, 500, 1000, 2000, 5000, 10000, Inf),
labels = c("0‚Äì500", "501‚Äì1000", "1001‚Äì2000", "2001‚Äì5000", "5001‚Äì10000", "10001+"),
right = TRUE)) %>%
count(RangeGroup) %>%
ggplot(aes(x = RangeGroup, y = n, text = paste("N√∫mero de torres:", n))) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "N√∫mero de torres por rango de cobertura",
x = "Rango de cobertura (m)",
y = "N√∫mero de torres") +
theme_minimal()
# Convertir a gr√°fico interactivo
ggplotly(plot_rango, tooltip = "text")
# Crear gr√°fico con ggplot2
plot_radio <- df_egypt %>%
count(radio) %>%
mutate(percentage = n / sum(n)) %>%
ggplot(aes(x = reorder(radio, -percentage),
y = percentage,
text = paste0("Radio: ", radio,
"<br>N√∫mero de torres: ", n,
"<br>Porcentaje: ", percent(percentage, accuracy = 0.1)))) +
geom_bar(stat = "identity", fill = "darkgreen") +
scale_y_continuous(labels = percent_format()) +
labs(title = "Porcentaje de torres por tipo de radio",
x = "Tipo de radio",
y = "Porcentaje") +
theme_minimal()
# Convertir a gr√°fico interactivo
ggplotly(plot_radio, tooltip = "text")
plot_cid <- df_egypt %>%
count(CID) %>%
top_n(10, n) %>%
mutate(percentage = n / sum(n)) %>%
ggplot(aes(x = reorder(as.factor(CID), -percentage),
y = percentage,
text = paste0("CID: ", CID,
"<br>N√∫mero de torres: ", n,
"<br>Porcentaje: ", percent(percentage, accuracy = 0.1)))) +
geom_bar(stat = "identity", fill = "purple") +
scale_y_continuous(labels = percent_format()) +
labs(title = "Top 10 CIDs con m√°s torres",
x = "CID",
y = "Porcentaje") +
theme_minimal()
ggplotly(plot_cid, tooltip = "text")
plot_network <- df_egypt %>%
count(Network) %>%
mutate(percentage = n / sum(n)) %>%
ggplot(aes(x = reorder(Network, -percentage),
y = percentage,
fill = Network,
text = paste0("Operador: ", Network,
"<br>N√∫mero de torres: ", n,
"<br>Porcentaje: ", percent(percentage, accuracy = 0.1)))) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = percent_format()) +
labs(title = "Porcentaje de torres por operador de red",
x = "Operador",
y = "Porcentaje") +
theme_minimal() +
theme(legend.position = "none")  # Oculta leyenda redundante
ggplotly(plot_network, tooltip = "text")
quarto::quarto_render()
# üìö Cargar librer√≠as necesarias
library(leaflet)
library(readxl)
library(openxlsx)
library(sf)
library(ggplot2)
library(dplyr)
library(units)
library(giscoR)
library(scales)
library(plotly)
# üì• Cargar y preparar datos
df2 <- read.csv("C:/Users/marc/Desktop/UOC/DataViz/P2/Africa towers.csv")
df_egypt <- df2[df2$Country == "Egypt", ]
df_egypt <- df_egypt[df_egypt$LON >= 30.6 & df_egypt$LON <= 33.2, ]
df_egypt <- df_egypt[, !(names(df_egypt) %in% c("created", "updated", "averageSignal", "Continent"))]
# üìà Cargar gr√°ficos desde archivo externo
source("plots.R")
plot_rango
plot_radio
plot_cid
plot_network
R.home()
.libPaths()
find.package("leaflet")
Sys.setenv(QUARTO_R = "C:/Program Files/R/R-4.5.1/bin/R.exe")
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("sf", "rnaturalearth", "rnaturalearthdata", "dplyr"))
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
library(readxl)
library(openxlsx)
library(sf)
library(ggplot2)
library(dplyr)
library(units)
library(giscoR);library(rnaturalearthdata)
library(scales);library(rnaturalearth)
library(plotly);library(quarto)
df2 <- read.csv("C:/Users/marc/Desktop/UOC/DataViz/P2/Africa towers.csv")
#rm(df2)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
library(readxl)
library(openxlsx)
library(sf)
library(ggplot2)
library(dplyr)
library(units)
library(giscoR);library(rnaturalearthdata)
library(scales);library(rnaturalearth)
library(plotly);library(quarto)
df2 <- read.csv("C:/Users/marc/Desktop/UOC/DataViz/P2/Africa towers.csv")
#rm(df2)
df_egypt <- df2[df2$Country == "Egypt", ]
df_egypt <- df_egypt[df_egypt$LON >= 30.6 & df_egypt$LON <= 33.2, ]
df_egypt <- df_egypt[, !(names(df_egypt) %in% c("created", "updated", "averageSignal", "Continent"))]
# Load rivers dataset (this loads all major rivers)
rivers <- ne_download(scale = 10, type = "rivers_lake_centerlines", category = "physical", returnclass = "sf")
# Filter for Nile
nile <- rivers %>% filter(name == "Nile")
# Plot to check
plot(st_geometry(nile))
# Convert towers to sf points
towers_sf <- st_as_sf(df_egypt, coords = c("LON", "LAT"), crs = 4326)
# Reproject both to a metric CRS (important for distances)
nile_proj <- st_transform(nile, crs = 3857)
towers_proj <- st_transform(towers_sf, crs = 3857)
# Filter towers within 5 km of the Nile
towers_near_nile <- towers_proj[st_is_within_distance(towers_proj, nile_proj, dist = 5000), ]
# Back to data frame if needed
towers_near_nile_df <- as.data.frame(st_drop_geometry(towers_near_nile))
# Convert towers to sf points
towers_sf <- st_as_sf(df_egypt, coords = c("LON", "LAT"), crs = 4326)
# Reproject to metric
towers_proj <- st_transform(towers_sf, crs = 3857)
nile_proj   <- st_transform(nile, crs = 3857)
# Filter towers within 5 km
nearby_index <- st_is_within_distance(towers_proj, nile_proj, dist = 5000)
towers_near_nile <- towers_proj[lengths(nearby_index) > 0, ]
# Convert to data frame
towers_near_nile_df <- as.data.frame(st_drop_geometry(towers_near_nile))
leaflet(data = towers_near_nile_df) %>%
addTiles() %>%  # capa base de OpenStreetMap
addCircleMarkers(
lng = ~LON,
lat = ~LAT,
radius = ~5,
color = "blue",
stroke = FALSE,
fillOpacity = 0.6,
popup = ~paste("Radio:", radio,
"<br>Operador (mcc):", MCC,
"<br>Net:", Network,
"<br>Se√±al promedio:", averageSignal,
"<br>Rango (m):", RANGE)
) %>%
setView(lng = 31, lat = 26.5, zoom = 6)
towers_near_nile_df.head()
towers_near_nile_df
towers_near_nile_df.columns()
towers_near_nile_df
# After filtering
towers_near_nile_df <- towers_near_nile %>%
mutate(
LON = st_coordinates(.)[,1],
LAT = st_coordinates(.)[,2]
) %>%
st_drop_geometry()
leaflet(data = towers_near_nile_df) %>%
addTiles() %>%  # capa base de OpenStreetMap
addCircleMarkers(
lng = ~LON,
lat = ~LAT,
radius = ~5,
color = "blue",
stroke = FALSE,
fillOpacity = 0.6,
popup = ~paste("Radio:", radio,
"<br>Operador (mcc):", MCC,
"<br>Net:", Network,
"<br>Se√±al promedio:", averageSignal,
"<br>Rango (m):", RANGE)
) %>%
setView(lng = 31, lat = 26.5, zoom = 6)
leaflet(data = towers_near_nile_df) %>%
addTiles() %>%  # capa base de OpenStreetMap
addCircleMarkers(
lng = ~LON,
lat = ~LAT,
radius = ~5,
color = "blue",
stroke = FALSE,
fillOpacity = 0.6,
popup = ~paste("Radio:", radio,
"<br>Operador (mcc):", MCC,
"<br>Net:", Network,
"<br>Rango (m):", RANGE)
) %>%
setView(lng = 31, lat = 26.5, zoom = 6)
towers_near_nile_df
# Convert to sf but keep LON and LAT
towers_sf <- st_as_sf(df_egypt, coords = c("LON", "LAT"), crs = 4326, remove = FALSE)
# Project both to metric CRS (for accurate distance)
towers_proj <- st_transform(towers_sf, crs = 3857)
nile_proj   <- st_transform(nile, crs = 3857)
# Filter towers within 5 km of the Nile
nearby_index <- st_is_within_distance(towers_proj, nile_proj, dist = 5000)
towers_near_nile <- towers_proj[lengths(nearby_index) > 0, ]
# Drop geometry but keep original LAT and LON
towers_near_nile_df <- st_drop_geometry(towers_near_nile)
towers_near_nile_df
leaflet(data = towers_near_nile_df) %>%
addTiles() %>%  # capa base de OpenStreetMap
addCircleMarkers(
lng = ~LON,
lat = ~LAT,
radius = ~5,
color = "blue",
stroke = FALSE,
fillOpacity = 0.6,
popup = ~paste("Radio:", radio,
"<br>Operador (mcc):", MCC,
"<br>Net:", Network,
"<br>Rango (m):", RANGE)
) %>%
setView(lng = 31, lat = 26.5, zoom = 6)
unique(rivers$name)
