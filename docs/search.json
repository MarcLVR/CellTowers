[
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Nile Tower Coverage Analysis",
    "section": "Introduction",
    "text": "Introduction\nThis report analyzes the cellular tower coverage along the Nile River in Egypt using geospatial data. Interactive visualizations have been created to explore tower range, radio technology, network providers, and spatial distribution. The result is an intuitive dashboard that helps evaluate actual network coverage around the Nile corridor. The part of interest of the route goes from Cairo to Aswan."
  },
  {
    "objectID": "index.html#towers-by-coverage-range",
    "href": "index.html#towers-by-coverage-range",
    "title": "Nile Tower Coverage Analysis",
    "section": "Towers by Coverage Range",
    "text": "Towers by Coverage Range\nThis bar chart shows the number of towers grouped by their approximate coverage range (in meters)."
  },
  {
    "objectID": "index.html#percentage-of-towers-by-radio-technology",
    "href": "index.html#percentage-of-towers-by-radio-technology",
    "title": "Nile Tower Coverage Analysis",
    "section": "Percentage of Towers by Radio Technology",
    "text": "Percentage of Towers by Radio Technology\nThis visualization displays the proportion of towers by radio technology (e.g., GSM, LTE, UMTS)."
  },
  {
    "objectID": "index.html#top-10-cids-with-most-towers",
    "href": "index.html#top-10-cids-with-most-towers",
    "title": "Nile Tower Coverage Analysis",
    "section": "Top 10 CIDs with Most Towers",
    "text": "Top 10 CIDs with Most Towers\nEach CID represents a Base Transceiver Station (BTS) or sector. This chart highlights the top 10 CIDs with the most tower entries, which may indicate densely populated or technically redundant areas."
  },
  {
    "objectID": "index.html#percentage-of-towers-by-network-operator",
    "href": "index.html#percentage-of-towers-by-network-operator",
    "title": "Nile Tower Coverage Analysis",
    "section": "Percentage of Towers by Network Operator",
    "text": "Percentage of Towers by Network Operator\nThis chart shows the distribution of towers by network operator (e.g., Vodafone, Etisalat, Orange)."
  },
  {
    "objectID": "index.html#interactive-maps-by-network",
    "href": "index.html#interactive-maps-by-network",
    "title": "Nile Tower Coverage Analysis",
    "section": "Interactive Maps by Network",
    "text": "Interactive Maps by Network\nEach map below shows the towers deployed by a specific operator. The circles represent each towerâ€™s coverage radius, allowing a visual comparison of network reach across regions.\n\nCell Towers Etisalat\nCell Towers Vodafone\nCell Towers Orange\nCell Towers WE"
  },
  {
    "objectID": "index.html#interactive-maps-by-radio-type",
    "href": "index.html#interactive-maps-by-radio-type",
    "title": "Nile Tower Coverage Analysis",
    "section": "Interactive Maps by Radio Type",
    "text": "Interactive Maps by Radio Type\nThese maps classify towers by radio transmission type. Larger circles indicate towers with ranges exceeding 5 km. Each layer gives a detailed view of coverage by technology.\n\nGSM Coverage Map\nLTE Coverage Map\nNR Coverage Map\nUMTS Coverage Map"
  },
  {
    "objectID": "index.html#uncovered-areas",
    "href": "index.html#uncovered-areas",
    "title": "Nile Tower Coverage Analysis",
    "section": "Uncovered Areas",
    "text": "Uncovered Areas\nThe following maps highlight the areas within 10 km of the Nile River that are not covered by any tower, segmented by radio technology:\n\nGeneral Map Coverage"
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "Nile Tower Coverage Analysis",
    "section": "Conclusion",
    "text": "Conclusion\nThis visual analysis provides insight into the spatial distribution and technological composition of telecom infrastructure all along the Nile river in Egypt, going from Cairo to Aswan."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "CellTowers.html",
    "href": "CellTowers.html",
    "title": "CellTowers",
    "section": "",
    "text": "#install.packages(\"openxlsx\")\n#install.packages(\"readxl\")\n#install.packages(\"leaflet\")  \n#install.packages(\"sf\")\n#install.packages(\"dplyr\")\n#install.packages(\"ggplot2\")\n#install.packages(\"giscoR\")\n#install.packages(\"scales\")  \n#install.packages(\"quarto\")\nlibrary(leaflet);library(sf)\n\nLinking to GEOS 3.13.1, GDAL 3.11.0, PROJ 9.6.0; sf_use_s2() is TRUE\n\nlibrary(ggplot2);library(dplyr)\n\n\nAdjuntando el paquete: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(units);library(htmlwidgets)\n\nudunits database from C:/Users/marc/AppData/Local/R/win-library/4.5/units/share/udunits/udunits2.xml\n\nlibrary(giscoR);library(rnaturalearthdata)\nlibrary(scales);library(rnaturalearth)\n\n\nAdjuntando el paquete: 'rnaturalearth'\n\n\nThe following object is masked from 'package:rnaturalearthdata':\n\n    countries110\n\nlibrary(plotly);library(quarto)\n\n\nAdjuntando el paquete: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout"
  },
  {
    "objectID": "CellTowers.html#r-markdown",
    "href": "CellTowers.html#r-markdown",
    "title": "CellTowers",
    "section": "R Markdown",
    "text": "R Markdown\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\ndf2 &lt;- read.csv(\"C:/Users/marc/Desktop/UOC/DataViz/P2/Africa towers.csv\")\n#rm(df2)\n\n\ndf_egypt &lt;- df2[df2$Country == \"Egypt\", ]\n\n\ndf_egypt &lt;- df_egypt[df_egypt$LON &gt;= 30 & df_egypt$LON &lt;= 33.2, ]\ndf_egypt &lt;- df_egypt[, !(names(df_egypt) %in% c(\"created\", \"updated\", \"averageSignal\", \"Continent\", \"changeable\"))]\n\n\n# Load river data from Natural Earth\nrivers &lt;- ne_download(scale = 10,\n                      type = \"rivers_lake_centerlines\",\n                      category = \"physical\",\n                      returnclass = \"sf\")\n\nReading layer `ne_10m_rivers_lake_centerlines' from data source \n  `C:\\Users\\marc\\AppData\\Local\\Temp\\Rtmp6Da5Sh\\ne_10m_rivers_lake_centerlines.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1473 features and 38 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: -164.9035 ymin: -52.15775 xmax: 177.5204 ymax: 75.79348\nGeodetic CRS:  WGS 84\n\n\n\n# Filter all segments related to the Nile system\nnile_parts &lt;- rivers %&gt;%\n  filter(name %in% c(\n    \"Nile\"\n  ))\n\n# Combine into a single multiline geometry\nnile &lt;- st_union(nile_parts)\n\n# Convert towers to sf points (keeping original LAT and LON)\ntowers_sf &lt;- st_as_sf(df_egypt, coords = c(\"LON\", \"LAT\"), crs = 4326, remove = FALSE)\n\n# Reproject both geometries to metric CRS for distance computation\ntowers_proj &lt;- st_transform(towers_sf, 3857)\nnile_proj &lt;- st_transform(nile, 3857)\n\n# Filter towers within 10 km of the Nile\nnearby_index &lt;- st_is_within_distance(towers_proj, nile_proj, dist = 10000)\ntowers_near_nile &lt;- towers_proj[lengths(nearby_index) &gt; 0, ]\n\n# Drop geometry but keep original columns\ntowers_near_nile_df &lt;- st_drop_geometry(towers_near_nile)\n\n\nleaflet(data = towers_near_nile_df) %&gt;%\n  addTiles() %&gt;%\n  addCircleMarkers(\n    lng = ~LON,\n    lat = ~LAT,\n    radius = ~5,\n    color = \"blue\",\n    stroke = FALSE,\n    fillOpacity = 0.3,\n    popup = ~paste(\"Radio:\", radio,\n                   \"&lt;br&gt;Operador (mcc):\", MCC,\n                   \"&lt;br&gt;Net:\", Network,\n                   \"&lt;br&gt;Rango (m):\", RANGE)\n  ) %&gt;%\n  setView(lng = 31, lat = 26.5, zoom = 6) \n\n\n\n\n\n\nleaflet(data = towers_near_nile_df) %&gt;%\n  addTiles() %&gt;%\n\n  # Add subtle range coverage circles\n  addCircles(\n    lng = ~LON,\n    lat = ~LAT,\n    radius = ~RANGE,\n    color = \"#FFA500\",       # lighter orange\n    stroke = FALSE,          # remove border\n    fillOpacity = 0.05       # very transparent\n  ) %&gt;%\n\n  # Add sharp tower markers\n  addCircleMarkers(\n    lng = ~LON,\n    lat = ~LAT,\n    radius = 5,\n    color = \"black\",\n    fillColor = \"cyan\",\n    stroke = TRUE,\n    weight = 0.8,\n    fillOpacity = 0.9,\n    popup = ~paste(\"Radio:\", radio,\n                   \"&lt;br&gt;Operador (mcc):\", MCC,\n                   \"&lt;br&gt;Net:\", Network,\n                   \"&lt;br&gt;Rango (m):\", RANGE)\n  ) %&gt;%\n\n  setView(lng = 31, lat = 26.5, zoom = 8)\n\n\n\n\n\n\nnile_proj &lt;- st_transform(nile, 3857)\nnile_buffer_10km &lt;- st_buffer(nile_proj, dist = 10000)\n\nnetworks &lt;- unique(towers_near_nile_df$Network)\n\nfor (net in networks) {\n  # Filter by network\n  net_data &lt;- towers_near_nile_df %&gt;% filter(Network == net)\n\n  # 2. Convert to sf\n  towers_sf &lt;- st_as_sf(net_data, coords = c(\"LON\", \"LAT\"), crs = 4326, remove = FALSE)\n  towers_proj &lt;- st_transform(towers_sf, 3857)\n\n  # 3. Create coverage buffer\n  coverage_buffers &lt;- st_buffer(towers_proj, dist = towers_proj$RANGE)\n  covered_area &lt;- st_union(coverage_buffers)\n\n  # 4. Calculate none coverage zone within 10 km from the Nile\n  uncovered_area &lt;- st_difference(nile_buffer_10km, covered_area)\n\n  # 5. Create map\n  map &lt;- leaflet(data = towers_sf) %&gt;%\n    addTiles() %&gt;%\n\n    # None covered zones\n    addPolygons(data = st_transform(uncovered_area, 4326),\n                color = \"red\",\n                weight = 1,\n                fillOpacity = 0.3,\n                label = \"Zona no cubierta\") %&gt;%\n    addCircles(\n      lng = ~LON,\n      lat = ~LAT,\n      radius = ~RANGE,\n      color = \"orange\",\n      stroke = TRUE,\n      weight = 0.5,\n      opacity = 0.5,\n      fillOpacity = 0.1\n    ) %&gt;%\n\n    # Tower markers\n    addCircleMarkers(\n      lng = ~LON,\n      lat = ~LAT,\n      radius = 6,\n      color = \"black\",\n      fillColor = \"blue\",\n      stroke = TRUE,\n      weight = 1,\n      fillOpacity = 0.8,\n      popup = ~paste(\"Radio:\", radio,\n                     \"&lt;br&gt;Operador (mcc):\", MCC,\n                     \"&lt;br&gt;Net:\", Network,\n                     \"&lt;br&gt;Rango (m):\", RANGE)\n    ) %&gt;%\n\n    # Name of network\n    addControl(\n      html = paste0(\"&lt;div style='font-weight:bold;font-size:16px;'&gt;\", net, \"&lt;/div&gt;\"),\n      position = \"bottomleft\"\n    ) %&gt;%\n\n    setView(lng = 31, lat = 26.5, zoom = 6)\n\n  print(map)\n\n  saveWidget(map, file = paste0(\"tower_map_\", net, \".html\"))\n}\n\n\nnile_proj &lt;- st_transform(nile, 3857)\nnile_buffer &lt;- st_union(st_buffer(nile_proj, dist = 10000))\nnile_buffer_area &lt;- st_area(nile_buffer)\n\n# Unique networks\nnetworks &lt;- unique(towers_near_nile_df$Network)\n\ncoverage_summary &lt;- data.frame(\n  Network = character(),\n  AreaCovered_km2 = numeric(),\n  TotalArea_km2 = numeric(),\n  CoveragePercent = numeric(),\n  stringsAsFactors = FALSE\n)\n\nfor (net in networks) {\n  net_data &lt;- towers_near_nile_df %&gt;% filter(Network == net)\n\n  if (nrow(net_data) == 0) next\n\n  # Convert sf\n  net_coverage &lt;- st_as_sf(net_data, coords = c(\"LON\", \"LAT\"), crs = 4326) %&gt;%\n    st_transform(3857) %&gt;%\n    st_buffer(dist = .$RANGE) %&gt;%\n    st_union()\n\n  # Intersect with the buffer of nile\n  intersected_area &lt;- st_intersection(nile_buffer, net_coverage)\n  area_covered &lt;- st_area(intersected_area)\n\n  # save\n  coverage_summary &lt;- rbind(coverage_summary, data.frame(\n    Network = net,\n    AreaCovered_km2 = as.numeric(area_covered) / 1e6,\n    TotalArea_km2   = as.numeric(nile_buffer_area) / 1e6,\n    CoveragePercent = as.numeric(area_covered / nile_buffer_area) * 100\n  ))\n}\n\ncoverage_summary_clean &lt;- coverage_summary %&gt;%\n  filter(Network %in% c(\"Etisalat\", \"Vodafone\", \"Orange\", \"WE\")) %&gt;%\n  arrange(desc(CoveragePercent)) %&gt;%\n  mutate(\n    AreaCovered_km2 = round(AreaCovered_km2, 2),\n    TotalArea_km2   = round(TotalArea_km2, 2),\n    CoveragePercent = round(CoveragePercent, 2)\n  )\n\nprint(coverage_summary_clean)\n\n   Network AreaCovered_km2 TotalArea_km2 CoveragePercent\n1 Vodafone        14180.07      58919.03           24.07\n2 Etisalat        11918.92      58919.03           20.23\n3   Orange        10781.98      58919.03           18.30\n4       WE          561.10      58919.03            0.95\n\n\n\nnile_proj &lt;- st_transform(nile, 3857)\nnile_buffer_10km &lt;- st_buffer(nile_proj, dist = 10000)\n\nradio_types &lt;- unique(towers_near_nile_df$radio)\n\nfor (r in radio_types) {\n  radio_data &lt;- towers_near_nile_df %&gt;%\n    filter(radio == r)\n\n  if (nrow(radio_data) == 0) next\n\n\n  towers_sf &lt;- st_as_sf(radio_data, coords = c(\"LON\", \"LAT\"), crs = 4326, remove = FALSE)\n  towers_proj &lt;- st_transform(towers_sf, 3857)\n\n\n  coverage_buffers &lt;- st_buffer(towers_proj, dist = towers_proj$RANGE)\n\n  covered_area &lt;- st_union(coverage_buffers)\n\n\n  uncovered_area &lt;- st_difference(nile_buffer_10km, covered_area)\n\n  towers_sf$marker_color &lt;- ifelse(towers_sf$RANGE &gt; 5000, \"red\", \"darkgreen\")\n\n  map &lt;- leaflet(data = towers_sf) %&gt;%\n    addTiles() %&gt;%\n\n    # Zonas no cubiertas en rojo\n    addPolygons(data = st_transform(uncovered_area, 4326),\n                color = \"red\", weight = 1, fillOpacity = 0.3,\n                label = \"Zona no cubierta\") %&gt;%\n\n    # CÃ­rculos de cobertura\n    addCircles(\n      lng = ~LON,\n      lat = ~LAT,\n      radius = ~RANGE,\n      color = \"orange\",\n      stroke = TRUE,\n      weight = 2,\n      opacity = 0.8,\n      fillOpacity = 0.2\n    ) %&gt;%\n\n    # Marcadores por torre\n    addCircleMarkers(\n      lng = ~LON,\n      lat = ~LAT,\n      radius = 6,\n      color = \"black\",\n      fillColor = ~marker_color,\n      stroke = TRUE,\n      weight = 1,\n      fillOpacity = 0.8,\n      popup = ~paste(\"Radio:\", radio,\n                     \"&lt;br&gt;Operador (mcc):\", MCC,\n                     \"&lt;br&gt;Net:\", Network,\n                     \"&lt;br&gt;Rango (m):\", RANGE)\n    ) %&gt;%\n\n    # Nombre del tipo de radio\n    addControl(\n      html = paste0(\"&lt;div style='font-weight:bold;font-size:16px;'&gt;\", r, \"&lt;/div&gt;\"),\n      position = \"bottomleft\"\n    ) %&gt;%\n\n    setView(lng = 31, lat = 26.5, zoom = 6)\n\n  print(map)\n\n  saveWidget(map, file = paste0(\"map_radio_\", r, \".html\"))\n}\n\n\nplot_rango &lt;- towers_near_nile_df %&gt;%\n  mutate(RangeGroup = cut(RANGE,\n                          breaks = c(0, 500, 1000, 2000, 5000, 10000, Inf),\n                          labels = c(\"0â€“500\", \"501â€“1000\", \"1001â€“2000\", \"2001â€“5000\", \"5001â€“10000\", \"10001+\"),\n                          right = TRUE)) %&gt;%\n  count(RangeGroup) %&gt;%\n  ggplot(aes(x = RangeGroup, y = n, text = paste(\"NÃºmero de torres:\", n))) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Number of towers by range of coverage\",\n       x = \"Covergae Range (m)\",\n       y = \"Number of Towers\") +\n  theme_minimal()\n\n\nggplotly(plot_rango, tooltip = \"text\")\n\n\n\n\n\n\n# Crear grÃ¡fico con ggplot2\nplot_radio &lt;- towers_near_nile_df %&gt;%\n  count(radio) %&gt;%\n  mutate(percentage = n / sum(n)) %&gt;%\n  ggplot(aes(x = reorder(radio, -percentage),\n             y = percentage,\n             text = paste0(\"Radio: \", radio,\n                           \"&lt;br&gt;NÃºmero de torres: \", n,\n                           \"&lt;br&gt;Porcentaje: \", percent(percentage, accuracy = 0.1)))) +\n  geom_bar(stat = \"identity\", fill = \"darkgreen\") +\n  scale_y_continuous(labels = percent_format()) +\n  labs(title = \"Percentage of towers by radio type\",\n       x = \"Radio Type\",\n       y = \"Percentage\") +\n  theme_minimal()\n\nggplotly(plot_radio, tooltip = \"text\")\n\n\n\n\n\n\nplot_cid &lt;- towers_near_nile_df %&gt;%\n  filter(CID != 0) %&gt;%                           \n  count(CID) %&gt;%\n  arrange(desc(n)) %&gt;%\n  slice_max(n, n = 10) %&gt;%\n  mutate(percentage = n / sum(n)) %&gt;%\n  ggplot(aes(x = reorder(as.factor(CID), -percentage),\n             y = percentage,\n             text = paste0(\"CID: \", CID,\n                           \"&lt;br&gt;NÃºmero de torres: \", n,\n                           \"&lt;br&gt;Porcentaje: \", percent(percentage, accuracy = 0.1)))) +\n  geom_bar(stat = \"identity\", fill = \"#8E44AD\", width = 0.6) +   \n  geom_text(aes(label = paste0(round(percentage * 100, 1), \"%\")),\n            vjust = -0.5, size = 3.5, color = \"black\") +         # porcentaje arriba\n  scale_y_continuous(labels = percent_format(accuracy = 1),\n                     expand = expansion(mult = c(0, 0.1))) +\n  labs(title = \"Top 10 CIDs with more towers\",\n       x = \"CID (Cell Identifier)\",\n       y = \"Tower percentage\") +\n  theme_minimal(base_size = 13) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 15, hjust = 0.5),\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  )\n\nggplotly(plot_cid, tooltip = \"text\")\n\n\n\n\n\n\nplot_network &lt;- towers_near_nile_df %&gt;%\n  count(Network) %&gt;%\n  mutate(percentage = n / sum(n)) %&gt;%\n  ggplot(aes(x = reorder(Network, -percentage),\n             y = percentage,\n             fill = Network,\n             text = paste0(\"Operador: \", Network,\n                           \"&lt;br&gt;NÃºmero de torres: \", n,\n                           \"&lt;br&gt;Porcentaje: \", percent(percentage, accuracy = 0.1)))) +\n  geom_bar(stat = \"identity\") +\n  scale_y_continuous(labels = percent_format()) +\n  labs(title = \"Percentage of towers by network operator\",\n       x = \"Network operator\",\n       y = \"Percenatge\") +\n  theme_minimal() +\n  theme(legend.position = \"none\") \n\nggplotly(plot_network, tooltip = \"text\")\n\n\n\n\n\n\ntowers_sf &lt;- st_as_sf(towers_near_nile_df, coords = c(\"LON\", \"LAT\"), crs = 4326, remove = FALSE)\ntowers_proj &lt;- st_transform(towers_sf, 3857)\n\ncoverage_buffers &lt;- st_buffer(towers_proj, dist = towers_proj$RANGE)\ncovered_area &lt;- st_union(coverage_buffers)\n\nnile_proj &lt;- st_transform(nile, 3857)\n\nnile_buffer_10km &lt;- st_buffer(nile_proj, dist = 10000)\n\n\nuncovered_area &lt;- st_difference(nile_buffer_10km, covered_area)\n\n\nmap_coverage &lt;- leaflet() %&gt;%\n  addTiles() %&gt;%\n\n  addPolygons(data = st_transform(uncovered_area, 4326),\n              color = \"red\",\n              weight = 1,\n              fillOpacity = 0.3,\n              label = \"Non Covered Zone\") %&gt;%\n\n  addCircles(data = towers_sf,\n             radius = ~RANGE,\n             color = \"green\",\n             weight = 1,\n             fillOpacity = 0.1) %&gt;%\n\n  addCircleMarkers(data = towers_sf,\n                   radius = 4,\n                   color = \"darkblue\",\n                   fillColor = \"blue\",\n                   fillOpacity = 1,\n                   popup = ~paste(\"CID:\", CID,\n                                  \"&lt;br&gt;Radio:\", radio,\n                                  \"&lt;br&gt;Net:\", Network,\n                                  \"&lt;br&gt;Rango:\", RANGE)) %&gt;%\n\n\n  setView(lng = 31, lat = 26.5, zoom = 6)\n\nsaveWidget(map_coverage, file = \"docs/map_coverage.html\", selfcontained = TRUE)"
  }
]